/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.CalendarManagement.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-02-18")
public class Meeting implements org.apache.thrift.TBase<Meeting, Meeting._Fields>, java.io.Serializable, Cloneable, Comparable<Meeting> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Meeting");

  private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AGENDA_FIELD_DESC = new org.apache.thrift.protocol.TField("agenda", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MEETING_ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingRoomId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isActive", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeIds", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MeetingStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MeetingTupleSchemeFactory();

  public int meetingId; // required
  public @org.apache.thrift.annotation.Nullable String description; // required
  public @org.apache.thrift.annotation.Nullable String agenda; // required
  public int meetingRoomId; // required
  public @org.apache.thrift.annotation.Nullable String date; // required
  public @org.apache.thrift.annotation.Nullable String startTime; // required
  public @org.apache.thrift.annotation.Nullable String endTime; // required
  public boolean isActive; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<Integer> employeeIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEETING_ID((short)1, "meetingId"),
    DESCRIPTION((short)2, "description"),
    AGENDA((short)3, "agenda"),
    MEETING_ROOM_ID((short)4, "meetingRoomId"),
    DATE((short)5, "date"),
    START_TIME((short)6, "startTime"),
    END_TIME((short)7, "endTime"),
    IS_ACTIVE((short)8, "isActive"),
    EMPLOYEE_IDS((short)9, "employeeIds");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEETING_ID
          return MEETING_ID;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // AGENDA
          return AGENDA;
        case 4: // MEETING_ROOM_ID
          return MEETING_ROOM_ID;
        case 5: // DATE
          return DATE;
        case 6: // START_TIME
          return START_TIME;
        case 7: // END_TIME
          return END_TIME;
        case 8: // IS_ACTIVE
          return IS_ACTIVE;
        case 9: // EMPLOYEE_IDS
          return EMPLOYEE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEETINGID_ISSET_ID = 0;
  private static final int __MEETINGROOMID_ISSET_ID = 1;
  private static final int __ISACTIVE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGENDA, new org.apache.thrift.meta_data.FieldMetaData("agenda", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEETING_ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingRoomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("isActive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EMPLOYEE_IDS, new org.apache.thrift.meta_data.FieldMetaData("employeeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Meeting.class, metaDataMap);
  }

  public Meeting() {
  }

  public Meeting(
    int meetingId,
    String description,
    String agenda,
    int meetingRoomId,
    String date,
    String startTime,
    String endTime,
    boolean isActive,
    java.util.List<Integer> employeeIds)
  {
    this();
    this.meetingId = meetingId;
    setMeetingIdIsSet(true);
    this.description = description;
    this.agenda = agenda;
    this.meetingRoomId = meetingRoomId;
    setMeetingRoomIdIsSet(true);
    this.date = date;
    this.startTime = startTime;
    this.endTime = endTime;
    this.isActive = isActive;
    setIsActiveIsSet(true);
    this.employeeIds = employeeIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Meeting(Meeting other) {
    __isset_bitfield = other.__isset_bitfield;
    this.meetingId = other.meetingId;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetAgenda()) {
      this.agenda = other.agenda;
    }
    this.meetingRoomId = other.meetingRoomId;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.isActive = other.isActive;
    if (other.isSetEmployeeIds()) {
      java.util.List<Integer> __this__employeeIds = new java.util.ArrayList<Integer>(other.employeeIds);
      this.employeeIds = __this__employeeIds;
    }
  }

  @Override
  public Meeting deepCopy() {
    return new Meeting(this);
  }

  @Override
  public void clear() {
    setMeetingIdIsSet(false);
    this.meetingId = 0;
    this.description = null;
    this.agenda = null;
    setMeetingRoomIdIsSet(false);
    this.meetingRoomId = 0;
    this.date = null;
    this.startTime = null;
    this.endTime = null;
    setIsActiveIsSet(false);
    this.isActive = false;
    this.employeeIds = null;
  }

  public int getMeetingId() {
    return this.meetingId;
  }

  public Meeting setMeetingId(int meetingId) {
    this.meetingId = meetingId;
    setMeetingIdIsSet(true);
    return this;
  }

  public void unsetMeetingId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEETINGID_ISSET_ID);
  }

  /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEETINGID_ISSET_ID);
  }

  public void setMeetingIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEETINGID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getDescription() {
    return this.description;
  }

  public Meeting setDescription(@org.apache.thrift.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getAgenda() {
    return this.agenda;
  }

  public Meeting setAgenda(@org.apache.thrift.annotation.Nullable String agenda) {
    this.agenda = agenda;
    return this;
  }

  public void unsetAgenda() {
    this.agenda = null;
  }

  /** Returns true if field agenda is set (has been assigned a value) and false otherwise */
  public boolean isSetAgenda() {
    return this.agenda != null;
  }

  public void setAgendaIsSet(boolean value) {
    if (!value) {
      this.agenda = null;
    }
  }

  public int getMeetingRoomId() {
    return this.meetingRoomId;
  }

  public Meeting setMeetingRoomId(int meetingRoomId) {
    this.meetingRoomId = meetingRoomId;
    setMeetingRoomIdIsSet(true);
    return this;
  }

  public void unsetMeetingRoomId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEETINGROOMID_ISSET_ID);
  }

  /** Returns true if field meetingRoomId is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingRoomId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEETINGROOMID_ISSET_ID);
  }

  public void setMeetingRoomIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEETINGROOMID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getDate() {
    return this.date;
  }

  public Meeting setDate(@org.apache.thrift.annotation.Nullable String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getStartTime() {
    return this.startTime;
  }

  public Meeting setStartTime(@org.apache.thrift.annotation.Nullable String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getEndTime() {
    return this.endTime;
  }

  public Meeting setEndTime(@org.apache.thrift.annotation.Nullable String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public boolean isIsActive() {
    return this.isActive;
  }

  public Meeting setIsActive(boolean isActive) {
    this.isActive = isActive;
    setIsActiveIsSet(true);
    return this;
  }

  public void unsetIsActive() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
  }

  /** Returns true if field isActive is set (has been assigned a value) and false otherwise */
  public boolean isSetIsActive() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
  }

  public void setIsActiveIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISACTIVE_ISSET_ID, value);
  }

  public int getEmployeeIdsSize() {
    return (this.employeeIds == null) ? 0 : this.employeeIds.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Integer> getEmployeeIdsIterator() {
    return (this.employeeIds == null) ? null : this.employeeIds.iterator();
  }

  public void addToEmployeeIds(int elem) {
    if (this.employeeIds == null) {
      this.employeeIds = new java.util.ArrayList<Integer>();
    }
    this.employeeIds.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Integer> getEmployeeIds() {
    return this.employeeIds;
  }

  public Meeting setEmployeeIds(@org.apache.thrift.annotation.Nullable java.util.List<Integer> employeeIds) {
    this.employeeIds = employeeIds;
    return this;
  }

  public void unsetEmployeeIds() {
    this.employeeIds = null;
  }

  /** Returns true if field employeeIds is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployeeIds() {
    return this.employeeIds != null;
  }

  public void setEmployeeIdsIsSet(boolean value) {
    if (!value) {
      this.employeeIds = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case MEETING_ID:
      if (value == null) {
        unsetMeetingId();
      } else {
        setMeetingId((Integer)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case AGENDA:
      if (value == null) {
        unsetAgenda();
      } else {
        setAgenda((String)value);
      }
      break;

    case MEETING_ROOM_ID:
      if (value == null) {
        unsetMeetingRoomId();
      } else {
        setMeetingRoomId((Integer)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case IS_ACTIVE:
      if (value == null) {
        unsetIsActive();
      } else {
        setIsActive((Boolean)value);
      }
      break;

    case EMPLOYEE_IDS:
      if (value == null) {
        unsetEmployeeIds();
      } else {
        setEmployeeIds((java.util.List<Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEETING_ID:
      return getMeetingId();

    case DESCRIPTION:
      return getDescription();

    case AGENDA:
      return getAgenda();

    case MEETING_ROOM_ID:
      return getMeetingRoomId();

    case DATE:
      return getDate();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case IS_ACTIVE:
      return isIsActive();

    case EMPLOYEE_IDS:
      return getEmployeeIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEETING_ID:
      return isSetMeetingId();
    case DESCRIPTION:
      return isSetDescription();
    case AGENDA:
      return isSetAgenda();
    case MEETING_ROOM_ID:
      return isSetMeetingRoomId();
    case DATE:
      return isSetDate();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case IS_ACTIVE:
      return isSetIsActive();
    case EMPLOYEE_IDS:
      return isSetEmployeeIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof Meeting)
      return this.equals((Meeting)that);
    return false;
  }

  public boolean equals(Meeting that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_meetingId = true;
    boolean that_present_meetingId = true;
    if (this_present_meetingId || that_present_meetingId) {
      if (!(this_present_meetingId && that_present_meetingId))
        return false;
      if (this.meetingId != that.meetingId)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_agenda = true && this.isSetAgenda();
    boolean that_present_agenda = true && that.isSetAgenda();
    if (this_present_agenda || that_present_agenda) {
      if (!(this_present_agenda && that_present_agenda))
        return false;
      if (!this.agenda.equals(that.agenda))
        return false;
    }

    boolean this_present_meetingRoomId = true;
    boolean that_present_meetingRoomId = true;
    if (this_present_meetingRoomId || that_present_meetingRoomId) {
      if (!(this_present_meetingRoomId && that_present_meetingRoomId))
        return false;
      if (this.meetingRoomId != that.meetingRoomId)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_isActive = true;
    boolean that_present_isActive = true;
    if (this_present_isActive || that_present_isActive) {
      if (!(this_present_isActive && that_present_isActive))
        return false;
      if (this.isActive != that.isActive)
        return false;
    }

    boolean this_present_employeeIds = true && this.isSetEmployeeIds();
    boolean that_present_employeeIds = true && that.isSetEmployeeIds();
    if (this_present_employeeIds || that_present_employeeIds) {
      if (!(this_present_employeeIds && that_present_employeeIds))
        return false;
      if (!this.employeeIds.equals(that.employeeIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + meetingId;

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetAgenda()) ? 131071 : 524287);
    if (isSetAgenda())
      hashCode = hashCode * 8191 + agenda.hashCode();

    hashCode = hashCode * 8191 + meetingRoomId;

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
    if (isSetStartTime())
      hashCode = hashCode * 8191 + startTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
    if (isSetEndTime())
      hashCode = hashCode * 8191 + endTime.hashCode();

    hashCode = hashCode * 8191 + ((isActive) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEmployeeIds()) ? 131071 : 524287);
    if (isSetEmployeeIds())
      hashCode = hashCode * 8191 + employeeIds.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Meeting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetMeetingId(), other.isSetMeetingId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDescription(), other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetAgenda(), other.isSetAgenda());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgenda()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agenda, other.agenda);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetMeetingRoomId(), other.isSetMeetingRoomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingRoomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingRoomId, other.meetingRoomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetDate(), other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetStartTime(), other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetEndTime(), other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetIsActive(), other.isSetIsActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isActive, other.isActive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetEmployeeIds(), other.isSetEmployeeIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployeeIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeIds, other.employeeIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Meeting(");
    boolean first = true;

    sb.append("meetingId:");
    sb.append(this.meetingId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agenda:");
    if (this.agenda == null) {
      sb.append("null");
    } else {
      sb.append(this.agenda);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingRoomId:");
    sb.append(this.meetingRoomId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isActive:");
    sb.append(this.isActive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("employeeIds:");
    if (this.employeeIds == null) {
      sb.append("null");
    } else {
      sb.append(this.employeeIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MeetingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public MeetingStandardScheme getScheme() {
      return new MeetingStandardScheme();
    }
  }

  private static class MeetingStandardScheme extends org.apache.thrift.scheme.StandardScheme<Meeting> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Meeting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEETING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.meetingId = iprot.readI32();
              struct.setMeetingIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGENDA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agenda = iprot.readString();
              struct.setAgendaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEETING_ROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.meetingRoomId = iprot.readI32();
              struct.setMeetingRoomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isActive = iprot.readBool();
              struct.setIsActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EMPLOYEE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.employeeIds = new java.util.ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.employeeIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setEmployeeIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Meeting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
      oprot.writeI32(struct.meetingId);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.agenda != null) {
        oprot.writeFieldBegin(AGENDA_FIELD_DESC);
        oprot.writeString(struct.agenda);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEETING_ROOM_ID_FIELD_DESC);
      oprot.writeI32(struct.meetingRoomId);
      oprot.writeFieldEnd();
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_ACTIVE_FIELD_DESC);
      oprot.writeBool(struct.isActive);
      oprot.writeFieldEnd();
      if (struct.employeeIds != null) {
        oprot.writeFieldBegin(EMPLOYEE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.employeeIds.size()));
          for (int _iter3 : struct.employeeIds)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MeetingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public MeetingTupleScheme getScheme() {
      return new MeetingTupleScheme();
    }
  }

  private static class MeetingTupleScheme extends org.apache.thrift.scheme.TupleScheme<Meeting> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Meeting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMeetingId()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetAgenda()) {
        optionals.set(2);
      }
      if (struct.isSetMeetingRoomId()) {
        optionals.set(3);
      }
      if (struct.isSetDate()) {
        optionals.set(4);
      }
      if (struct.isSetStartTime()) {
        optionals.set(5);
      }
      if (struct.isSetEndTime()) {
        optionals.set(6);
      }
      if (struct.isSetIsActive()) {
        optionals.set(7);
      }
      if (struct.isSetEmployeeIds()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetMeetingId()) {
        oprot.writeI32(struct.meetingId);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetAgenda()) {
        oprot.writeString(struct.agenda);
      }
      if (struct.isSetMeetingRoomId()) {
        oprot.writeI32(struct.meetingRoomId);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetIsActive()) {
        oprot.writeBool(struct.isActive);
      }
      if (struct.isSetEmployeeIds()) {
        {
          oprot.writeI32(struct.employeeIds.size());
          for (int _iter4 : struct.employeeIds)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Meeting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.meetingId = iprot.readI32();
        struct.setMeetingIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.agenda = iprot.readString();
        struct.setAgendaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.meetingRoomId = iprot.readI32();
        struct.setMeetingRoomIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isActive = iprot.readBool();
        struct.setIsActiveIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.employeeIds = new java.util.ArrayList<Integer>(_list5.size);
          int _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI32();
            struct.employeeIds.add(_elem6);
          }
        }
        struct.setEmployeeIdsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

