/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.CalendarManagement.generated;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-02-19")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class MeetingManage {

  public interface Iface {

    public boolean canScheduleMeeting(java.util.List<Integer> employeeIds, String date, String startTime, String endTime) throws org.apache.thrift.TException;

    public int scheduleMeeting(String description, String agenda, java.util.List<Integer> employeeIds, String date, String startTime, String endTime, int roomId) throws org.apache.thrift.TException;

    public void cancelMeeting(int meetingId) throws org.apache.thrift.TException;

    public void updateMeetingStatus(EmployeeMeetingStatus statusUpdate) throws org.apache.thrift.TException;

    public Meeting getMeetingDetails(int meetingId) throws org.apache.thrift.TException;

    public java.util.List<Meeting> getMeetings(int employeeId, String filterType) throws org.apache.thrift.TException;

    public java.util.List<EmployeeMeetingStatus> getMeetingStatuses(int meetingId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void canScheduleMeeting(java.util.List<Integer> employeeIds, String date, String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void scheduleMeeting(String description, String agenda, java.util.List<Integer> employeeIds, String date, String startTime, String endTime, int roomId, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException;

    public void cancelMeeting(int meetingId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void updateMeetingStatus(EmployeeMeetingStatus statusUpdate, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getMeetingDetails(int meetingId, org.apache.thrift.async.AsyncMethodCallback<Meeting> resultHandler) throws org.apache.thrift.TException;

    public void getMeetings(int employeeId, String filterType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Meeting>> resultHandler) throws org.apache.thrift.TException;

    public void getMeetingStatuses(int meetingId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<EmployeeMeetingStatus>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public boolean canScheduleMeeting(java.util.List<Integer> employeeIds, String date, String startTime, String endTime) throws org.apache.thrift.TException
    {
      send_canScheduleMeeting(employeeIds, date, startTime, endTime);
      return recv_canScheduleMeeting();
    }

    public void send_canScheduleMeeting(java.util.List<Integer> employeeIds, String date, String startTime, String endTime) throws org.apache.thrift.TException
    {
      canScheduleMeeting_args args = new canScheduleMeeting_args();
      args.setEmployeeIds(employeeIds);
      args.setDate(date);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("canScheduleMeeting", args);
    }

    public boolean recv_canScheduleMeeting() throws org.apache.thrift.TException
    {
      canScheduleMeeting_result result = new canScheduleMeeting_result();
      receiveBase(result, "canScheduleMeeting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "canScheduleMeeting failed: unknown result");
    }

    @Override
    public int scheduleMeeting(String description, String agenda, java.util.List<Integer> employeeIds, String date, String startTime, String endTime, int roomId) throws org.apache.thrift.TException
    {
      send_scheduleMeeting(description, agenda, employeeIds, date, startTime, endTime, roomId);
      return recv_scheduleMeeting();
    }

    public void send_scheduleMeeting(String description, String agenda, java.util.List<Integer> employeeIds, String date, String startTime, String endTime, int roomId) throws org.apache.thrift.TException
    {
      scheduleMeeting_args args = new scheduleMeeting_args();
      args.setDescription(description);
      args.setAgenda(agenda);
      args.setEmployeeIds(employeeIds);
      args.setDate(date);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.setRoomId(roomId);
      sendBase("scheduleMeeting", args);
    }

    public int recv_scheduleMeeting() throws org.apache.thrift.TException
    {
      scheduleMeeting_result result = new scheduleMeeting_result();
      receiveBase(result, "scheduleMeeting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scheduleMeeting failed: unknown result");
    }

    @Override
    public void cancelMeeting(int meetingId) throws org.apache.thrift.TException
    {
      send_cancelMeeting(meetingId);
      recv_cancelMeeting();
    }

    public void send_cancelMeeting(int meetingId) throws org.apache.thrift.TException
    {
      cancelMeeting_args args = new cancelMeeting_args();
      args.setMeetingId(meetingId);
      sendBase("cancelMeeting", args);
    }

    public void recv_cancelMeeting() throws org.apache.thrift.TException
    {
      cancelMeeting_result result = new cancelMeeting_result();
      receiveBase(result, "cancelMeeting");
      return;
    }

    @Override
    public void updateMeetingStatus(EmployeeMeetingStatus statusUpdate) throws org.apache.thrift.TException
    {
      send_updateMeetingStatus(statusUpdate);
      recv_updateMeetingStatus();
    }

    public void send_updateMeetingStatus(EmployeeMeetingStatus statusUpdate) throws org.apache.thrift.TException
    {
      updateMeetingStatus_args args = new updateMeetingStatus_args();
      args.setStatusUpdate(statusUpdate);
      sendBase("updateMeetingStatus", args);
    }

    public void recv_updateMeetingStatus() throws org.apache.thrift.TException
    {
      updateMeetingStatus_result result = new updateMeetingStatus_result();
      receiveBase(result, "updateMeetingStatus");
      return;
    }

    @Override
    public Meeting getMeetingDetails(int meetingId) throws org.apache.thrift.TException
    {
      send_getMeetingDetails(meetingId);
      return recv_getMeetingDetails();
    }

    public void send_getMeetingDetails(int meetingId) throws org.apache.thrift.TException
    {
      getMeetingDetails_args args = new getMeetingDetails_args();
      args.setMeetingId(meetingId);
      sendBase("getMeetingDetails", args);
    }

    public Meeting recv_getMeetingDetails() throws org.apache.thrift.TException
    {
      getMeetingDetails_result result = new getMeetingDetails_result();
      receiveBase(result, "getMeetingDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMeetingDetails failed: unknown result");
    }

    @Override
    public java.util.List<Meeting> getMeetings(int employeeId, String filterType) throws org.apache.thrift.TException
    {
      send_getMeetings(employeeId, filterType);
      return recv_getMeetings();
    }

    public void send_getMeetings(int employeeId, String filterType) throws org.apache.thrift.TException
    {
      getMeetings_args args = new getMeetings_args();
      args.setEmployeeId(employeeId);
      args.setFilterType(filterType);
      sendBase("getMeetings", args);
    }

    public java.util.List<Meeting> recv_getMeetings() throws org.apache.thrift.TException
    {
      getMeetings_result result = new getMeetings_result();
      receiveBase(result, "getMeetings");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMeetings failed: unknown result");
    }

    @Override
    public java.util.List<EmployeeMeetingStatus> getMeetingStatuses(int meetingId) throws org.apache.thrift.TException
    {
      send_getMeetingStatuses(meetingId);
      return recv_getMeetingStatuses();
    }

    public void send_getMeetingStatuses(int meetingId) throws org.apache.thrift.TException
    {
      getMeetingStatuses_args args = new getMeetingStatuses_args();
      args.setMeetingId(meetingId);
      sendBase("getMeetingStatuses", args);
    }

    public java.util.List<EmployeeMeetingStatus> recv_getMeetingStatuses() throws org.apache.thrift.TException
    {
      getMeetingStatuses_result result = new getMeetingStatuses_result();
      receiveBase(result, "getMeetingStatuses");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMeetingStatuses failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void canScheduleMeeting(java.util.List<Integer> employeeIds, String date, String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      canScheduleMeeting_call method_call = new canScheduleMeeting_call(employeeIds, date, startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class canScheduleMeeting_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private java.util.List<Integer> employeeIds;
      private String date;
      private String startTime;
      private String endTime;
      public canScheduleMeeting_call(java.util.List<Integer> employeeIds, String date, String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeIds = employeeIds;
        this.date = date;
        this.startTime = startTime;
        this.endTime = endTime;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("canScheduleMeeting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        canScheduleMeeting_args args = new canScheduleMeeting_args();
        args.setEmployeeIds(employeeIds);
        args.setDate(date);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_canScheduleMeeting();
      }
    }

    @Override
    public void scheduleMeeting(String description, String agenda, java.util.List<Integer> employeeIds, String date, String startTime, String endTime, int roomId, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scheduleMeeting_call method_call = new scheduleMeeting_call(description, agenda, employeeIds, date, startTime, endTime, roomId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scheduleMeeting_call extends org.apache.thrift.async.TAsyncMethodCall<Integer> {
      private String description;
      private String agenda;
      private java.util.List<Integer> employeeIds;
      private String date;
      private String startTime;
      private String endTime;
      private int roomId;
      public scheduleMeeting_call(String description, String agenda, java.util.List<Integer> employeeIds, String date, String startTime, String endTime, int roomId, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.description = description;
        this.agenda = agenda;
        this.employeeIds = employeeIds;
        this.date = date;
        this.startTime = startTime;
        this.endTime = endTime;
        this.roomId = roomId;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scheduleMeeting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scheduleMeeting_args args = new scheduleMeeting_args();
        args.setDescription(description);
        args.setAgenda(agenda);
        args.setEmployeeIds(employeeIds);
        args.setDate(date);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.setRoomId(roomId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Integer getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scheduleMeeting();
      }
    }

    @Override
    public void cancelMeeting(int meetingId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelMeeting_call method_call = new cancelMeeting_call(meetingId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelMeeting_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int meetingId;
      public cancelMeeting_call(int meetingId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelMeeting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelMeeting_args args = new cancelMeeting_args();
        args.setMeetingId(meetingId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_cancelMeeting();
        return null;
      }
    }

    @Override
    public void updateMeetingStatus(EmployeeMeetingStatus statusUpdate, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMeetingStatus_call method_call = new updateMeetingStatus_call(statusUpdate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMeetingStatus_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private EmployeeMeetingStatus statusUpdate;
      public updateMeetingStatus_call(EmployeeMeetingStatus statusUpdate, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.statusUpdate = statusUpdate;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMeetingStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMeetingStatus_args args = new updateMeetingStatus_args();
        args.setStatusUpdate(statusUpdate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateMeetingStatus();
        return null;
      }
    }

    @Override
    public void getMeetingDetails(int meetingId, org.apache.thrift.async.AsyncMethodCallback<Meeting> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMeetingDetails_call method_call = new getMeetingDetails_call(meetingId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMeetingDetails_call extends org.apache.thrift.async.TAsyncMethodCall<Meeting> {
      private int meetingId;
      public getMeetingDetails_call(int meetingId, org.apache.thrift.async.AsyncMethodCallback<Meeting> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMeetingDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMeetingDetails_args args = new getMeetingDetails_args();
        args.setMeetingId(meetingId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Meeting getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMeetingDetails();
      }
    }

    @Override
    public void getMeetings(int employeeId, String filterType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Meeting>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMeetings_call method_call = new getMeetings_call(employeeId, filterType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMeetings_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Meeting>> {
      private int employeeId;
      private String filterType;
      public getMeetings_call(int employeeId, String filterType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Meeting>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
        this.filterType = filterType;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMeetings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMeetings_args args = new getMeetings_args();
        args.setEmployeeId(employeeId);
        args.setFilterType(filterType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<Meeting> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMeetings();
      }
    }

    @Override
    public void getMeetingStatuses(int meetingId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<EmployeeMeetingStatus>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMeetingStatuses_call method_call = new getMeetingStatuses_call(meetingId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMeetingStatuses_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<EmployeeMeetingStatus>> {
      private int meetingId;
      public getMeetingStatuses_call(int meetingId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<EmployeeMeetingStatus>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMeetingStatuses", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMeetingStatuses_args args = new getMeetingStatuses_args();
        args.setMeetingId(meetingId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<EmployeeMeetingStatus> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMeetingStatuses();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("canScheduleMeeting", new canScheduleMeeting());
      processMap.put("scheduleMeeting", new scheduleMeeting());
      processMap.put("cancelMeeting", new cancelMeeting());
      processMap.put("updateMeetingStatus", new updateMeetingStatus());
      processMap.put("getMeetingDetails", new getMeetingDetails());
      processMap.put("getMeetings", new getMeetings());
      processMap.put("getMeetingStatuses", new getMeetingStatuses());
      return processMap;
    }

    public static class canScheduleMeeting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, canScheduleMeeting_args, canScheduleMeeting_result> {
      public canScheduleMeeting() {
        super("canScheduleMeeting");
      }

      @Override
      public canScheduleMeeting_args getEmptyArgsInstance() {
        return new canScheduleMeeting_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public canScheduleMeeting_result getEmptyResultInstance() {
        return new canScheduleMeeting_result();
      }

      @Override
      public canScheduleMeeting_result getResult(I iface, canScheduleMeeting_args args) throws org.apache.thrift.TException {
        canScheduleMeeting_result result = getEmptyResultInstance();
        result.success = iface.canScheduleMeeting(args.employeeIds, args.date, args.startTime, args.endTime);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class scheduleMeeting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scheduleMeeting_args, scheduleMeeting_result> {
      public scheduleMeeting() {
        super("scheduleMeeting");
      }

      @Override
      public scheduleMeeting_args getEmptyArgsInstance() {
        return new scheduleMeeting_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public scheduleMeeting_result getEmptyResultInstance() {
        return new scheduleMeeting_result();
      }

      @Override
      public scheduleMeeting_result getResult(I iface, scheduleMeeting_args args) throws org.apache.thrift.TException {
        scheduleMeeting_result result = getEmptyResultInstance();
        result.success = iface.scheduleMeeting(args.description, args.agenda, args.employeeIds, args.date, args.startTime, args.endTime, args.roomId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class cancelMeeting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelMeeting_args, cancelMeeting_result> {
      public cancelMeeting() {
        super("cancelMeeting");
      }

      @Override
      public cancelMeeting_args getEmptyArgsInstance() {
        return new cancelMeeting_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public cancelMeeting_result getEmptyResultInstance() {
        return new cancelMeeting_result();
      }

      @Override
      public cancelMeeting_result getResult(I iface, cancelMeeting_args args) throws org.apache.thrift.TException {
        cancelMeeting_result result = getEmptyResultInstance();
        iface.cancelMeeting(args.meetingId);
        return result;
      }
    }

    public static class updateMeetingStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMeetingStatus_args, updateMeetingStatus_result> {
      public updateMeetingStatus() {
        super("updateMeetingStatus");
      }

      @Override
      public updateMeetingStatus_args getEmptyArgsInstance() {
        return new updateMeetingStatus_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public updateMeetingStatus_result getEmptyResultInstance() {
        return new updateMeetingStatus_result();
      }

      @Override
      public updateMeetingStatus_result getResult(I iface, updateMeetingStatus_args args) throws org.apache.thrift.TException {
        updateMeetingStatus_result result = getEmptyResultInstance();
        iface.updateMeetingStatus(args.statusUpdate);
        return result;
      }
    }

    public static class getMeetingDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMeetingDetails_args, getMeetingDetails_result> {
      public getMeetingDetails() {
        super("getMeetingDetails");
      }

      @Override
      public getMeetingDetails_args getEmptyArgsInstance() {
        return new getMeetingDetails_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getMeetingDetails_result getEmptyResultInstance() {
        return new getMeetingDetails_result();
      }

      @Override
      public getMeetingDetails_result getResult(I iface, getMeetingDetails_args args) throws org.apache.thrift.TException {
        getMeetingDetails_result result = getEmptyResultInstance();
        result.success = iface.getMeetingDetails(args.meetingId);
        return result;
      }
    }

    public static class getMeetings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMeetings_args, getMeetings_result> {
      public getMeetings() {
        super("getMeetings");
      }

      @Override
      public getMeetings_args getEmptyArgsInstance() {
        return new getMeetings_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getMeetings_result getEmptyResultInstance() {
        return new getMeetings_result();
      }

      @Override
      public getMeetings_result getResult(I iface, getMeetings_args args) throws org.apache.thrift.TException {
        getMeetings_result result = getEmptyResultInstance();
        result.success = iface.getMeetings(args.employeeId, args.filterType);
        return result;
      }
    }

    public static class getMeetingStatuses<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMeetingStatuses_args, getMeetingStatuses_result> {
      public getMeetingStatuses() {
        super("getMeetingStatuses");
      }

      @Override
      public getMeetingStatuses_args getEmptyArgsInstance() {
        return new getMeetingStatuses_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getMeetingStatuses_result getEmptyResultInstance() {
        return new getMeetingStatuses_result();
      }

      @Override
      public getMeetingStatuses_result getResult(I iface, getMeetingStatuses_args args) throws org.apache.thrift.TException {
        getMeetingStatuses_result result = getEmptyResultInstance();
        result.success = iface.getMeetingStatuses(args.meetingId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("canScheduleMeeting", new canScheduleMeeting());
      processMap.put("scheduleMeeting", new scheduleMeeting());
      processMap.put("cancelMeeting", new cancelMeeting());
      processMap.put("updateMeetingStatus", new updateMeetingStatus());
      processMap.put("getMeetingDetails", new getMeetingDetails());
      processMap.put("getMeetings", new getMeetings());
      processMap.put("getMeetingStatuses", new getMeetingStatuses());
      return processMap;
    }

    public static class canScheduleMeeting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, canScheduleMeeting_args, Boolean, canScheduleMeeting_result> {
      public canScheduleMeeting() {
        super("canScheduleMeeting");
      }

      @Override
      public canScheduleMeeting_result getEmptyResultInstance() {
        return new canScheduleMeeting_result();
      }

      @Override
      public canScheduleMeeting_args getEmptyArgsInstance() {
        return new canScheduleMeeting_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          @Override
          public void onComplete(Boolean o) {
            canScheduleMeeting_result result = new canScheduleMeeting_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            canScheduleMeeting_result result = new canScheduleMeeting_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, canScheduleMeeting_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.canScheduleMeeting(args.employeeIds, args.date, args.startTime, args.endTime,resultHandler);
      }
    }

    public static class scheduleMeeting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scheduleMeeting_args, Integer, scheduleMeeting_result> {
      public scheduleMeeting() {
        super("scheduleMeeting");
      }

      @Override
      public scheduleMeeting_result getEmptyResultInstance() {
        return new scheduleMeeting_result();
      }

      @Override
      public scheduleMeeting_args getEmptyArgsInstance() {
        return new scheduleMeeting_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Integer>() {
          @Override
          public void onComplete(Integer o) {
            scheduleMeeting_result result = new scheduleMeeting_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            scheduleMeeting_result result = new scheduleMeeting_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, scheduleMeeting_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException {
        iface.scheduleMeeting(args.description, args.agenda, args.employeeIds, args.date, args.startTime, args.endTime, args.roomId,resultHandler);
      }
    }

    public static class cancelMeeting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelMeeting_args, Void, cancelMeeting_result> {
      public cancelMeeting() {
        super("cancelMeeting");
      }

      @Override
      public cancelMeeting_result getEmptyResultInstance() {
        return new cancelMeeting_result();
      }

      @Override
      public cancelMeeting_args getEmptyArgsInstance() {
        return new cancelMeeting_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            cancelMeeting_result result = new cancelMeeting_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            cancelMeeting_result result = new cancelMeeting_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, cancelMeeting_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.cancelMeeting(args.meetingId,resultHandler);
      }
    }

    public static class updateMeetingStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMeetingStatus_args, Void, updateMeetingStatus_result> {
      public updateMeetingStatus() {
        super("updateMeetingStatus");
      }

      @Override
      public updateMeetingStatus_result getEmptyResultInstance() {
        return new updateMeetingStatus_result();
      }

      @Override
      public updateMeetingStatus_args getEmptyArgsInstance() {
        return new updateMeetingStatus_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            updateMeetingStatus_result result = new updateMeetingStatus_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateMeetingStatus_result result = new updateMeetingStatus_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, updateMeetingStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updateMeetingStatus(args.statusUpdate,resultHandler);
      }
    }

    public static class getMeetingDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMeetingDetails_args, Meeting, getMeetingDetails_result> {
      public getMeetingDetails() {
        super("getMeetingDetails");
      }

      @Override
      public getMeetingDetails_result getEmptyResultInstance() {
        return new getMeetingDetails_result();
      }

      @Override
      public getMeetingDetails_args getEmptyArgsInstance() {
        return new getMeetingDetails_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Meeting> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Meeting>() { 
          @Override
          public void onComplete(Meeting o) {
            getMeetingDetails_result result = new getMeetingDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMeetingDetails_result result = new getMeetingDetails_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getMeetingDetails_args args, org.apache.thrift.async.AsyncMethodCallback<Meeting> resultHandler) throws org.apache.thrift.TException {
        iface.getMeetingDetails(args.meetingId,resultHandler);
      }
    }

    public static class getMeetings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMeetings_args, java.util.List<Meeting>, getMeetings_result> {
      public getMeetings() {
        super("getMeetings");
      }

      @Override
      public getMeetings_result getEmptyResultInstance() {
        return new getMeetings_result();
      }

      @Override
      public getMeetings_args getEmptyArgsInstance() {
        return new getMeetings_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Meeting>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Meeting>>() { 
          @Override
          public void onComplete(java.util.List<Meeting> o) {
            getMeetings_result result = new getMeetings_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMeetings_result result = new getMeetings_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getMeetings_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Meeting>> resultHandler) throws org.apache.thrift.TException {
        iface.getMeetings(args.employeeId, args.filterType,resultHandler);
      }
    }

    public static class getMeetingStatuses<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMeetingStatuses_args, java.util.List<EmployeeMeetingStatus>, getMeetingStatuses_result> {
      public getMeetingStatuses() {
        super("getMeetingStatuses");
      }

      @Override
      public getMeetingStatuses_result getEmptyResultInstance() {
        return new getMeetingStatuses_result();
      }

      @Override
      public getMeetingStatuses_args getEmptyArgsInstance() {
        return new getMeetingStatuses_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<EmployeeMeetingStatus>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<EmployeeMeetingStatus>>() { 
          @Override
          public void onComplete(java.util.List<EmployeeMeetingStatus> o) {
            getMeetingStatuses_result result = new getMeetingStatuses_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMeetingStatuses_result result = new getMeetingStatuses_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getMeetingStatuses_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<EmployeeMeetingStatus>> resultHandler) throws org.apache.thrift.TException {
        iface.getMeetingStatuses(args.meetingId,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class canScheduleMeeting_args implements org.apache.thrift.TBase<canScheduleMeeting_args, canScheduleMeeting_args._Fields>, java.io.Serializable, Cloneable, Comparable<canScheduleMeeting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canScheduleMeeting_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new canScheduleMeeting_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new canScheduleMeeting_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Integer> employeeIds; // required
    public @org.apache.thrift.annotation.Nullable String date; // required
    public @org.apache.thrift.annotation.Nullable String startTime; // required
    public @org.apache.thrift.annotation.Nullable String endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_IDS((short)1, "employeeIds"),
      DATE((short)2, "date"),
      START_TIME((short)3, "startTime"),
      END_TIME((short)4, "endTime");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_IDS
            return EMPLOYEE_IDS;
          case 2: // DATE
            return DATE;
          case 3: // START_TIME
            return START_TIME;
          case 4: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_IDS, new org.apache.thrift.meta_data.FieldMetaData("employeeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canScheduleMeeting_args.class, metaDataMap);
    }

    public canScheduleMeeting_args() {
    }

    public canScheduleMeeting_args(
      java.util.List<Integer> employeeIds,
      String date,
      String startTime,
      String endTime)
    {
      this();
      this.employeeIds = employeeIds;
      this.date = date;
      this.startTime = startTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canScheduleMeeting_args(canScheduleMeeting_args other) {
      if (other.isSetEmployeeIds()) {
        java.util.List<Integer> __this__employeeIds = new java.util.ArrayList<Integer>(other.employeeIds);
        this.employeeIds = __this__employeeIds;
      }
      if (other.isSetDate()) {
        this.date = other.date;
      }
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    @Override
    public canScheduleMeeting_args deepCopy() {
      return new canScheduleMeeting_args(this);
    }

    @Override
    public void clear() {
      this.employeeIds = null;
      this.date = null;
      this.startTime = null;
      this.endTime = null;
    }

    public int getEmployeeIdsSize() {
      return (this.employeeIds == null) ? 0 : this.employeeIds.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Integer> getEmployeeIdsIterator() {
      return (this.employeeIds == null) ? null : this.employeeIds.iterator();
    }

    public void addToEmployeeIds(int elem) {
      if (this.employeeIds == null) {
        this.employeeIds = new java.util.ArrayList<Integer>();
      }
      this.employeeIds.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Integer> getEmployeeIds() {
      return this.employeeIds;
    }

    public canScheduleMeeting_args setEmployeeIds(@org.apache.thrift.annotation.Nullable java.util.List<Integer> employeeIds) {
      this.employeeIds = employeeIds;
      return this;
    }

    public void unsetEmployeeIds() {
      this.employeeIds = null;
    }

    /** Returns true if field employeeIds is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeIds() {
      return this.employeeIds != null;
    }

    public void setEmployeeIdsIsSet(boolean value) {
      if (!value) {
        this.employeeIds = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getDate() {
      return this.date;
    }

    public canScheduleMeeting_args setDate(@org.apache.thrift.annotation.Nullable String date) {
      this.date = date;
      return this;
    }

    public void unsetDate() {
      this.date = null;
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return this.date != null;
    }

    public void setDateIsSet(boolean value) {
      if (!value) {
        this.date = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getStartTime() {
      return this.startTime;
    }

    public canScheduleMeeting_args setStartTime(@org.apache.thrift.annotation.Nullable String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getEndTime() {
      return this.endTime;
    }

    public canScheduleMeeting_args setEndTime(@org.apache.thrift.annotation.Nullable String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case EMPLOYEE_IDS:
        if (value == null) {
          unsetEmployeeIds();
        } else {
          setEmployeeIds((java.util.List<Integer>)value);
        }
        break;

      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_IDS:
        return getEmployeeIds();

      case DATE:
        return getDate();

      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_IDS:
        return isSetEmployeeIds();
      case DATE:
        return isSetDate();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof canScheduleMeeting_args)
        return this.equals((canScheduleMeeting_args)that);
      return false;
    }

    public boolean equals(canScheduleMeeting_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeIds = true && this.isSetEmployeeIds();
      boolean that_present_employeeIds = true && that.isSetEmployeeIds();
      if (this_present_employeeIds || that_present_employeeIds) {
        if (!(this_present_employeeIds && that_present_employeeIds))
          return false;
        if (!this.employeeIds.equals(that.employeeIds))
          return false;
      }

      boolean this_present_date = true && this.isSetDate();
      boolean that_present_date = true && that.isSetDate();
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (!this.date.equals(that.date))
          return false;
      }

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEmployeeIds()) ? 131071 : 524287);
      if (isSetEmployeeIds())
        hashCode = hashCode * 8191 + employeeIds.hashCode();

      hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
      if (isSetDate())
        hashCode = hashCode * 8191 + date.hashCode();

      hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
      if (isSetStartTime())
        hashCode = hashCode * 8191 + startTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
      if (isSetEndTime())
        hashCode = hashCode * 8191 + endTime.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(canScheduleMeeting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetEmployeeIds(), other.isSetEmployeeIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeIds, other.employeeIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetDate(), other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetStartTime(), other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetEndTime(), other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("canScheduleMeeting_args(");
      boolean first = true;

      sb.append("employeeIds:");
      if (this.employeeIds == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canScheduleMeeting_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public canScheduleMeeting_argsStandardScheme getScheme() {
        return new canScheduleMeeting_argsStandardScheme();
      }
    }

    private static class canScheduleMeeting_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<canScheduleMeeting_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, canScheduleMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.employeeIds = new java.util.ArrayList<Integer>(_list8.size);
                  int _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readI32();
                    struct.employeeIds.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setEmployeeIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTime = iprot.readString();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, canScheduleMeeting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.employeeIds != null) {
          oprot.writeFieldBegin(EMPLOYEE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.employeeIds.size()));
            for (int _iter11 : struct.employeeIds)
            {
              oprot.writeI32(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.date != null) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
        if (struct.startTime != null) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canScheduleMeeting_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public canScheduleMeeting_argsTupleScheme getScheme() {
        return new canScheduleMeeting_argsTupleScheme();
      }
    }

    private static class canScheduleMeeting_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<canScheduleMeeting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canScheduleMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeIds()) {
          optionals.set(0);
        }
        if (struct.isSetDate()) {
          optionals.set(1);
        }
        if (struct.isSetStartTime()) {
          optionals.set(2);
        }
        if (struct.isSetEndTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetEmployeeIds()) {
          {
            oprot.writeI32(struct.employeeIds.size());
            for (int _iter12 : struct.employeeIds)
            {
              oprot.writeI32(_iter12);
            }
          }
        }
        if (struct.isSetDate()) {
          oprot.writeString(struct.date);
        }
        if (struct.isSetStartTime()) {
          oprot.writeString(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canScheduleMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
            struct.employeeIds = new java.util.ArrayList<Integer>(_list13.size);
            int _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readI32();
              struct.employeeIds.add(_elem14);
            }
          }
          struct.setEmployeeIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.date = iprot.readString();
          struct.setDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.startTime = iprot.readString();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class canScheduleMeeting_result implements org.apache.thrift.TBase<canScheduleMeeting_result, canScheduleMeeting_result._Fields>, java.io.Serializable, Cloneable, Comparable<canScheduleMeeting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canScheduleMeeting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new canScheduleMeeting_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new canScheduleMeeting_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canScheduleMeeting_result.class, metaDataMap);
    }

    public canScheduleMeeting_result() {
    }

    public canScheduleMeeting_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canScheduleMeeting_result(canScheduleMeeting_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public canScheduleMeeting_result deepCopy() {
      return new canScheduleMeeting_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public canScheduleMeeting_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof canScheduleMeeting_result)
        return this.equals((canScheduleMeeting_result)that);
      return false;
    }

    public boolean equals(canScheduleMeeting_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(canScheduleMeeting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("canScheduleMeeting_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canScheduleMeeting_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public canScheduleMeeting_resultStandardScheme getScheme() {
        return new canScheduleMeeting_resultStandardScheme();
      }
    }

    private static class canScheduleMeeting_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<canScheduleMeeting_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, canScheduleMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, canScheduleMeeting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canScheduleMeeting_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public canScheduleMeeting_resultTupleScheme getScheme() {
        return new canScheduleMeeting_resultTupleScheme();
      }
    }

    private static class canScheduleMeeting_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<canScheduleMeeting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canScheduleMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canScheduleMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class scheduleMeeting_args implements org.apache.thrift.TBase<scheduleMeeting_args, scheduleMeeting_args._Fields>, java.io.Serializable, Cloneable, Comparable<scheduleMeeting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scheduleMeeting_args");

    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AGENDA_FIELD_DESC = new org.apache.thrift.protocol.TField("agenda", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField EMPLOYEE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeIds", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new scheduleMeeting_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new scheduleMeeting_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String description; // required
    public @org.apache.thrift.annotation.Nullable String agenda; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<Integer> employeeIds; // required
    public @org.apache.thrift.annotation.Nullable String date; // required
    public @org.apache.thrift.annotation.Nullable String startTime; // required
    public @org.apache.thrift.annotation.Nullable String endTime; // required
    public int roomId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DESCRIPTION((short)1, "description"),
      AGENDA((short)2, "agenda"),
      EMPLOYEE_IDS((short)3, "employeeIds"),
      DATE((short)4, "date"),
      START_TIME((short)5, "startTime"),
      END_TIME((short)6, "endTime"),
      ROOM_ID((short)7, "roomId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DESCRIPTION
            return DESCRIPTION;
          case 2: // AGENDA
            return AGENDA;
          case 3: // EMPLOYEE_IDS
            return EMPLOYEE_IDS;
          case 4: // DATE
            return DATE;
          case 5: // START_TIME
            return START_TIME;
          case 6: // END_TIME
            return END_TIME;
          case 7: // ROOM_ID
            return ROOM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOMID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AGENDA, new org.apache.thrift.meta_data.FieldMetaData("agenda", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EMPLOYEE_IDS, new org.apache.thrift.meta_data.FieldMetaData("employeeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scheduleMeeting_args.class, metaDataMap);
    }

    public scheduleMeeting_args() {
    }

    public scheduleMeeting_args(
      String description,
      String agenda,
      java.util.List<Integer> employeeIds,
      String date,
      String startTime,
      String endTime,
      int roomId)
    {
      this();
      this.description = description;
      this.agenda = agenda;
      this.employeeIds = employeeIds;
      this.date = date;
      this.startTime = startTime;
      this.endTime = endTime;
      this.roomId = roomId;
      setRoomIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scheduleMeeting_args(scheduleMeeting_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      if (other.isSetAgenda()) {
        this.agenda = other.agenda;
      }
      if (other.isSetEmployeeIds()) {
        java.util.List<Integer> __this__employeeIds = new java.util.ArrayList<Integer>(other.employeeIds);
        this.employeeIds = __this__employeeIds;
      }
      if (other.isSetDate()) {
        this.date = other.date;
      }
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
      this.roomId = other.roomId;
    }

    @Override
    public scheduleMeeting_args deepCopy() {
      return new scheduleMeeting_args(this);
    }

    @Override
    public void clear() {
      this.description = null;
      this.agenda = null;
      this.employeeIds = null;
      this.date = null;
      this.startTime = null;
      this.endTime = null;
      setRoomIdIsSet(false);
      this.roomId = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public String getDescription() {
      return this.description;
    }

    public scheduleMeeting_args setDescription(@org.apache.thrift.annotation.Nullable String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getAgenda() {
      return this.agenda;
    }

    public scheduleMeeting_args setAgenda(@org.apache.thrift.annotation.Nullable String agenda) {
      this.agenda = agenda;
      return this;
    }

    public void unsetAgenda() {
      this.agenda = null;
    }

    /** Returns true if field agenda is set (has been assigned a value) and false otherwise */
    public boolean isSetAgenda() {
      return this.agenda != null;
    }

    public void setAgendaIsSet(boolean value) {
      if (!value) {
        this.agenda = null;
      }
    }

    public int getEmployeeIdsSize() {
      return (this.employeeIds == null) ? 0 : this.employeeIds.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Integer> getEmployeeIdsIterator() {
      return (this.employeeIds == null) ? null : this.employeeIds.iterator();
    }

    public void addToEmployeeIds(int elem) {
      if (this.employeeIds == null) {
        this.employeeIds = new java.util.ArrayList<Integer>();
      }
      this.employeeIds.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Integer> getEmployeeIds() {
      return this.employeeIds;
    }

    public scheduleMeeting_args setEmployeeIds(@org.apache.thrift.annotation.Nullable java.util.List<Integer> employeeIds) {
      this.employeeIds = employeeIds;
      return this;
    }

    public void unsetEmployeeIds() {
      this.employeeIds = null;
    }

    /** Returns true if field employeeIds is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeIds() {
      return this.employeeIds != null;
    }

    public void setEmployeeIdsIsSet(boolean value) {
      if (!value) {
        this.employeeIds = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getDate() {
      return this.date;
    }

    public scheduleMeeting_args setDate(@org.apache.thrift.annotation.Nullable String date) {
      this.date = date;
      return this;
    }

    public void unsetDate() {
      this.date = null;
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return this.date != null;
    }

    public void setDateIsSet(boolean value) {
      if (!value) {
        this.date = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getStartTime() {
      return this.startTime;
    }

    public scheduleMeeting_args setStartTime(@org.apache.thrift.annotation.Nullable String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getEndTime() {
      return this.endTime;
    }

    public scheduleMeeting_args setEndTime(@org.apache.thrift.annotation.Nullable String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public int getRoomId() {
      return this.roomId;
    }

    public scheduleMeeting_args setRoomId(int roomId) {
      this.roomId = roomId;
      setRoomIdIsSet(true);
      return this;
    }

    public void unsetRoomId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
    }

    public void setRoomIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      case AGENDA:
        if (value == null) {
          unsetAgenda();
        } else {
          setAgenda((String)value);
        }
        break;

      case EMPLOYEE_IDS:
        if (value == null) {
          unsetEmployeeIds();
        } else {
          setEmployeeIds((java.util.List<Integer>)value);
        }
        break;

      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((String)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      case ROOM_ID:
        if (value == null) {
          unsetRoomId();
        } else {
          setRoomId((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DESCRIPTION:
        return getDescription();

      case AGENDA:
        return getAgenda();

      case EMPLOYEE_IDS:
        return getEmployeeIds();

      case DATE:
        return getDate();

      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      case ROOM_ID:
        return getRoomId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DESCRIPTION:
        return isSetDescription();
      case AGENDA:
        return isSetAgenda();
      case EMPLOYEE_IDS:
        return isSetEmployeeIds();
      case DATE:
        return isSetDate();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case ROOM_ID:
        return isSetRoomId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof scheduleMeeting_args)
        return this.equals((scheduleMeeting_args)that);
      return false;
    }

    public boolean equals(scheduleMeeting_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_agenda = true && this.isSetAgenda();
      boolean that_present_agenda = true && that.isSetAgenda();
      if (this_present_agenda || that_present_agenda) {
        if (!(this_present_agenda && that_present_agenda))
          return false;
        if (!this.agenda.equals(that.agenda))
          return false;
      }

      boolean this_present_employeeIds = true && this.isSetEmployeeIds();
      boolean that_present_employeeIds = true && that.isSetEmployeeIds();
      if (this_present_employeeIds || that_present_employeeIds) {
        if (!(this_present_employeeIds && that_present_employeeIds))
          return false;
        if (!this.employeeIds.equals(that.employeeIds))
          return false;
      }

      boolean this_present_date = true && this.isSetDate();
      boolean that_present_date = true && that.isSetDate();
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (!this.date.equals(that.date))
          return false;
      }

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      boolean this_present_roomId = true;
      boolean that_present_roomId = true;
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (this.roomId != that.roomId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
      if (isSetDescription())
        hashCode = hashCode * 8191 + description.hashCode();

      hashCode = hashCode * 8191 + ((isSetAgenda()) ? 131071 : 524287);
      if (isSetAgenda())
        hashCode = hashCode * 8191 + agenda.hashCode();

      hashCode = hashCode * 8191 + ((isSetEmployeeIds()) ? 131071 : 524287);
      if (isSetEmployeeIds())
        hashCode = hashCode * 8191 + employeeIds.hashCode();

      hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
      if (isSetDate())
        hashCode = hashCode * 8191 + date.hashCode();

      hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
      if (isSetStartTime())
        hashCode = hashCode * 8191 + startTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
      if (isSetEndTime())
        hashCode = hashCode * 8191 + endTime.hashCode();

      hashCode = hashCode * 8191 + roomId;

      return hashCode;
    }

    @Override
    public int compareTo(scheduleMeeting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetDescription(), other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetAgenda(), other.isSetAgenda());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgenda()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agenda, other.agenda);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetEmployeeIds(), other.isSetEmployeeIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeIds, other.employeeIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetDate(), other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetStartTime(), other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetEndTime(), other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetRoomId(), other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scheduleMeeting_args(");
      boolean first = true;

      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("agenda:");
      if (this.agenda == null) {
        sb.append("null");
      } else {
        sb.append(this.agenda);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("employeeIds:");
      if (this.employeeIds == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roomId:");
      sb.append(this.roomId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scheduleMeeting_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public scheduleMeeting_argsStandardScheme getScheme() {
        return new scheduleMeeting_argsStandardScheme();
      }
    }

    private static class scheduleMeeting_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<scheduleMeeting_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, scheduleMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AGENDA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.agenda = iprot.readString();
                struct.setAgendaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EMPLOYEE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.employeeIds = new java.util.ArrayList<Integer>(_list16.size);
                  int _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readI32();
                    struct.employeeIds.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setEmployeeIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTime = iprot.readString();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ROOM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roomId = iprot.readI32();
                struct.setRoomIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, scheduleMeeting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        if (struct.agenda != null) {
          oprot.writeFieldBegin(AGENDA_FIELD_DESC);
          oprot.writeString(struct.agenda);
          oprot.writeFieldEnd();
        }
        if (struct.employeeIds != null) {
          oprot.writeFieldBegin(EMPLOYEE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.employeeIds.size()));
            for (int _iter19 : struct.employeeIds)
            {
              oprot.writeI32(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.date != null) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
        if (struct.startTime != null) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeI32(struct.roomId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scheduleMeeting_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public scheduleMeeting_argsTupleScheme getScheme() {
        return new scheduleMeeting_argsTupleScheme();
      }
    }

    private static class scheduleMeeting_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<scheduleMeeting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scheduleMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDescription()) {
          optionals.set(0);
        }
        if (struct.isSetAgenda()) {
          optionals.set(1);
        }
        if (struct.isSetEmployeeIds()) {
          optionals.set(2);
        }
        if (struct.isSetDate()) {
          optionals.set(3);
        }
        if (struct.isSetStartTime()) {
          optionals.set(4);
        }
        if (struct.isSetEndTime()) {
          optionals.set(5);
        }
        if (struct.isSetRoomId()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetAgenda()) {
          oprot.writeString(struct.agenda);
        }
        if (struct.isSetEmployeeIds()) {
          {
            oprot.writeI32(struct.employeeIds.size());
            for (int _iter20 : struct.employeeIds)
            {
              oprot.writeI32(_iter20);
            }
          }
        }
        if (struct.isSetDate()) {
          oprot.writeString(struct.date);
        }
        if (struct.isSetStartTime()) {
          oprot.writeString(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
        if (struct.isSetRoomId()) {
          oprot.writeI32(struct.roomId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scheduleMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.agenda = iprot.readString();
          struct.setAgendaIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
            struct.employeeIds = new java.util.ArrayList<Integer>(_list21.size);
            int _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readI32();
              struct.employeeIds.add(_elem22);
            }
          }
          struct.setEmployeeIdsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.date = iprot.readString();
          struct.setDateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.startTime = iprot.readString();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.roomId = iprot.readI32();
          struct.setRoomIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class scheduleMeeting_result implements org.apache.thrift.TBase<scheduleMeeting_result, scheduleMeeting_result._Fields>, java.io.Serializable, Cloneable, Comparable<scheduleMeeting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scheduleMeeting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new scheduleMeeting_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new scheduleMeeting_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scheduleMeeting_result.class, metaDataMap);
    }

    public scheduleMeeting_result() {
    }

    public scheduleMeeting_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scheduleMeeting_result(scheduleMeeting_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public scheduleMeeting_result deepCopy() {
      return new scheduleMeeting_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public scheduleMeeting_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof scheduleMeeting_result)
        return this.equals((scheduleMeeting_result)that);
      return false;
    }

    public boolean equals(scheduleMeeting_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(scheduleMeeting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scheduleMeeting_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scheduleMeeting_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public scheduleMeeting_resultStandardScheme getScheme() {
        return new scheduleMeeting_resultStandardScheme();
      }
    }

    private static class scheduleMeeting_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<scheduleMeeting_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, scheduleMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, scheduleMeeting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scheduleMeeting_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public scheduleMeeting_resultTupleScheme getScheme() {
        return new scheduleMeeting_resultTupleScheme();
      }
    }

    private static class scheduleMeeting_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<scheduleMeeting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scheduleMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scheduleMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class cancelMeeting_args implements org.apache.thrift.TBase<cancelMeeting_args, cancelMeeting_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelMeeting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelMeeting_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelMeeting_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelMeeting_argsTupleSchemeFactory();

    public int meetingId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEETINGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelMeeting_args.class, metaDataMap);
    }

    public cancelMeeting_args() {
    }

    public cancelMeeting_args(
      int meetingId)
    {
      this();
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelMeeting_args(cancelMeeting_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.meetingId = other.meetingId;
    }

    @Override
    public cancelMeeting_args deepCopy() {
      return new cancelMeeting_args(this);
    }

    @Override
    public void clear() {
      setMeetingIdIsSet(false);
      this.meetingId = 0;
    }

    public int getMeetingId() {
      return this.meetingId;
    }

    public cancelMeeting_args setMeetingId(int meetingId) {
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
      return this;
    }

    public void unsetMeetingId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    public void setMeetingIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEETINGID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return getMeetingId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof cancelMeeting_args)
        return this.equals((cancelMeeting_args)that);
      return false;
    }

    public boolean equals(cancelMeeting_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_meetingId = true;
      boolean that_present_meetingId = true;
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (this.meetingId != that.meetingId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + meetingId;

      return hashCode;
    }

    @Override
    public int compareTo(cancelMeeting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetMeetingId(), other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelMeeting_args(");
      boolean first = true;

      sb.append("meetingId:");
      sb.append(this.meetingId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelMeeting_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public cancelMeeting_argsStandardScheme getScheme() {
        return new cancelMeeting_argsStandardScheme();
      }
    }

    private static class cancelMeeting_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancelMeeting_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.meetingId = iprot.readI32();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelMeeting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
        oprot.writeI32(struct.meetingId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelMeeting_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public cancelMeeting_argsTupleScheme getScheme() {
        return new cancelMeeting_argsTupleScheme();
      }
    }

    private static class cancelMeeting_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancelMeeting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMeetingId()) {
          oprot.writeI32(struct.meetingId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readI32();
          struct.setMeetingIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class cancelMeeting_result implements org.apache.thrift.TBase<cancelMeeting_result, cancelMeeting_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelMeeting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelMeeting_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelMeeting_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelMeeting_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelMeeting_result.class, metaDataMap);
    }

    public cancelMeeting_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelMeeting_result(cancelMeeting_result other) {
    }

    @Override
    public cancelMeeting_result deepCopy() {
      return new cancelMeeting_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof cancelMeeting_result)
        return this.equals((cancelMeeting_result)that);
      return false;
    }

    public boolean equals(cancelMeeting_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(cancelMeeting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelMeeting_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelMeeting_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public cancelMeeting_resultStandardScheme getScheme() {
        return new cancelMeeting_resultStandardScheme();
      }
    }

    private static class cancelMeeting_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancelMeeting_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelMeeting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelMeeting_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public cancelMeeting_resultTupleScheme getScheme() {
        return new cancelMeeting_resultTupleScheme();
      }
    }

    private static class cancelMeeting_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancelMeeting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class updateMeetingStatus_args implements org.apache.thrift.TBase<updateMeetingStatus_args, updateMeetingStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMeetingStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMeetingStatus_args");

    private static final org.apache.thrift.protocol.TField STATUS_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateMeetingStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateMeetingStatus_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable EmployeeMeetingStatus statusUpdate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATUS_UPDATE((short)1, "statusUpdate");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATUS_UPDATE
            return STATUS_UPDATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATUS_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("statusUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployeeMeetingStatus.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMeetingStatus_args.class, metaDataMap);
    }

    public updateMeetingStatus_args() {
    }

    public updateMeetingStatus_args(
      EmployeeMeetingStatus statusUpdate)
    {
      this();
      this.statusUpdate = statusUpdate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMeetingStatus_args(updateMeetingStatus_args other) {
      if (other.isSetStatusUpdate()) {
        this.statusUpdate = new EmployeeMeetingStatus(other.statusUpdate);
      }
    }

    @Override
    public updateMeetingStatus_args deepCopy() {
      return new updateMeetingStatus_args(this);
    }

    @Override
    public void clear() {
      this.statusUpdate = null;
    }

    @org.apache.thrift.annotation.Nullable
    public EmployeeMeetingStatus getStatusUpdate() {
      return this.statusUpdate;
    }

    public updateMeetingStatus_args setStatusUpdate(@org.apache.thrift.annotation.Nullable EmployeeMeetingStatus statusUpdate) {
      this.statusUpdate = statusUpdate;
      return this;
    }

    public void unsetStatusUpdate() {
      this.statusUpdate = null;
    }

    /** Returns true if field statusUpdate is set (has been assigned a value) and false otherwise */
    public boolean isSetStatusUpdate() {
      return this.statusUpdate != null;
    }

    public void setStatusUpdateIsSet(boolean value) {
      if (!value) {
        this.statusUpdate = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case STATUS_UPDATE:
        if (value == null) {
          unsetStatusUpdate();
        } else {
          setStatusUpdate((EmployeeMeetingStatus)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATUS_UPDATE:
        return getStatusUpdate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATUS_UPDATE:
        return isSetStatusUpdate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof updateMeetingStatus_args)
        return this.equals((updateMeetingStatus_args)that);
      return false;
    }

    public boolean equals(updateMeetingStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_statusUpdate = true && this.isSetStatusUpdate();
      boolean that_present_statusUpdate = true && that.isSetStatusUpdate();
      if (this_present_statusUpdate || that_present_statusUpdate) {
        if (!(this_present_statusUpdate && that_present_statusUpdate))
          return false;
        if (!this.statusUpdate.equals(that.statusUpdate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStatusUpdate()) ? 131071 : 524287);
      if (isSetStatusUpdate())
        hashCode = hashCode * 8191 + statusUpdate.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateMeetingStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetStatusUpdate(), other.isSetStatusUpdate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatusUpdate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusUpdate, other.statusUpdate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMeetingStatus_args(");
      boolean first = true;

      sb.append("statusUpdate:");
      if (this.statusUpdate == null) {
        sb.append("null");
      } else {
        sb.append(this.statusUpdate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (statusUpdate != null) {
        statusUpdate.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMeetingStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public updateMeetingStatus_argsStandardScheme getScheme() {
        return new updateMeetingStatus_argsStandardScheme();
      }
    }

    private static class updateMeetingStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateMeetingStatus_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMeetingStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATUS_UPDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.statusUpdate = new EmployeeMeetingStatus();
                struct.statusUpdate.read(iprot);
                struct.setStatusUpdateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMeetingStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.statusUpdate != null) {
          oprot.writeFieldBegin(STATUS_UPDATE_FIELD_DESC);
          struct.statusUpdate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMeetingStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public updateMeetingStatus_argsTupleScheme getScheme() {
        return new updateMeetingStatus_argsTupleScheme();
      }
    }

    private static class updateMeetingStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateMeetingStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMeetingStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStatusUpdate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStatusUpdate()) {
          struct.statusUpdate.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMeetingStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.statusUpdate = new EmployeeMeetingStatus();
          struct.statusUpdate.read(iprot);
          struct.setStatusUpdateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class updateMeetingStatus_result implements org.apache.thrift.TBase<updateMeetingStatus_result, updateMeetingStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMeetingStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMeetingStatus_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateMeetingStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateMeetingStatus_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMeetingStatus_result.class, metaDataMap);
    }

    public updateMeetingStatus_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMeetingStatus_result(updateMeetingStatus_result other) {
    }

    @Override
    public updateMeetingStatus_result deepCopy() {
      return new updateMeetingStatus_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof updateMeetingStatus_result)
        return this.equals((updateMeetingStatus_result)that);
      return false;
    }

    public boolean equals(updateMeetingStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(updateMeetingStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMeetingStatus_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMeetingStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public updateMeetingStatus_resultStandardScheme getScheme() {
        return new updateMeetingStatus_resultStandardScheme();
      }
    }

    private static class updateMeetingStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateMeetingStatus_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMeetingStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMeetingStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMeetingStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public updateMeetingStatus_resultTupleScheme getScheme() {
        return new updateMeetingStatus_resultTupleScheme();
      }
    }

    private static class updateMeetingStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateMeetingStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMeetingStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMeetingStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getMeetingDetails_args implements org.apache.thrift.TBase<getMeetingDetails_args, getMeetingDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMeetingDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMeetingDetails_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMeetingDetails_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMeetingDetails_argsTupleSchemeFactory();

    public int meetingId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEETINGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMeetingDetails_args.class, metaDataMap);
    }

    public getMeetingDetails_args() {
    }

    public getMeetingDetails_args(
      int meetingId)
    {
      this();
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMeetingDetails_args(getMeetingDetails_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.meetingId = other.meetingId;
    }

    @Override
    public getMeetingDetails_args deepCopy() {
      return new getMeetingDetails_args(this);
    }

    @Override
    public void clear() {
      setMeetingIdIsSet(false);
      this.meetingId = 0;
    }

    public int getMeetingId() {
      return this.meetingId;
    }

    public getMeetingDetails_args setMeetingId(int meetingId) {
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
      return this;
    }

    public void unsetMeetingId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    public void setMeetingIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEETINGID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return getMeetingId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getMeetingDetails_args)
        return this.equals((getMeetingDetails_args)that);
      return false;
    }

    public boolean equals(getMeetingDetails_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_meetingId = true;
      boolean that_present_meetingId = true;
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (this.meetingId != that.meetingId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + meetingId;

      return hashCode;
    }

    @Override
    public int compareTo(getMeetingDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetMeetingId(), other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMeetingDetails_args(");
      boolean first = true;

      sb.append("meetingId:");
      sb.append(this.meetingId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMeetingDetails_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMeetingDetails_argsStandardScheme getScheme() {
        return new getMeetingDetails_argsStandardScheme();
      }
    }

    private static class getMeetingDetails_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMeetingDetails_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getMeetingDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.meetingId = iprot.readI32();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getMeetingDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
        oprot.writeI32(struct.meetingId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMeetingDetails_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMeetingDetails_argsTupleScheme getScheme() {
        return new getMeetingDetails_argsTupleScheme();
      }
    }

    private static class getMeetingDetails_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMeetingDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMeetingDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMeetingId()) {
          oprot.writeI32(struct.meetingId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMeetingDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readI32();
          struct.setMeetingIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getMeetingDetails_result implements org.apache.thrift.TBase<getMeetingDetails_result, getMeetingDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMeetingDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMeetingDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMeetingDetails_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMeetingDetails_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Meeting success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Meeting.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMeetingDetails_result.class, metaDataMap);
    }

    public getMeetingDetails_result() {
    }

    public getMeetingDetails_result(
      Meeting success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMeetingDetails_result(getMeetingDetails_result other) {
      if (other.isSetSuccess()) {
        this.success = new Meeting(other.success);
      }
    }

    @Override
    public getMeetingDetails_result deepCopy() {
      return new getMeetingDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Meeting getSuccess() {
      return this.success;
    }

    public getMeetingDetails_result setSuccess(@org.apache.thrift.annotation.Nullable Meeting success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Meeting)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getMeetingDetails_result)
        return this.equals((getMeetingDetails_result)that);
      return false;
    }

    public boolean equals(getMeetingDetails_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMeetingDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMeetingDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMeetingDetails_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMeetingDetails_resultStandardScheme getScheme() {
        return new getMeetingDetails_resultStandardScheme();
      }
    }

    private static class getMeetingDetails_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMeetingDetails_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getMeetingDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Meeting();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getMeetingDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMeetingDetails_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMeetingDetails_resultTupleScheme getScheme() {
        return new getMeetingDetails_resultTupleScheme();
      }
    }

    private static class getMeetingDetails_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMeetingDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMeetingDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMeetingDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Meeting();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getMeetings_args implements org.apache.thrift.TBase<getMeetings_args, getMeetings_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMeetings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMeetings_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FILTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("filterType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMeetings_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMeetings_argsTupleSchemeFactory();

    public int employeeId; // required
    public @org.apache.thrift.annotation.Nullable String filterType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId"),
      FILTER_TYPE((short)2, "filterType");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          case 2: // FILTER_TYPE
            return FILTER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPLOYEEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FILTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("filterType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMeetings_args.class, metaDataMap);
    }

    public getMeetings_args() {
    }

    public getMeetings_args(
      int employeeId,
      String filterType)
    {
      this();
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      this.filterType = filterType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMeetings_args(getMeetings_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.employeeId = other.employeeId;
      if (other.isSetFilterType()) {
        this.filterType = other.filterType;
      }
    }

    @Override
    public getMeetings_args deepCopy() {
      return new getMeetings_args(this);
    }

    @Override
    public void clear() {
      setEmployeeIdIsSet(false);
      this.employeeId = 0;
      this.filterType = null;
    }

    public int getEmployeeId() {
      return this.employeeId;
    }

    public getMeetings_args setEmployeeId(int employeeId) {
      this.employeeId = employeeId;
      setEmployeeIdIsSet(true);
      return this;
    }

    public void unsetEmployeeId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID);
    }

    public void setEmployeeIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPLOYEEID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public String getFilterType() {
      return this.filterType;
    }

    public getMeetings_args setFilterType(@org.apache.thrift.annotation.Nullable String filterType) {
      this.filterType = filterType;
      return this;
    }

    public void unsetFilterType() {
      this.filterType = null;
    }

    /** Returns true if field filterType is set (has been assigned a value) and false otherwise */
    public boolean isSetFilterType() {
      return this.filterType != null;
    }

    public void setFilterTypeIsSet(boolean value) {
      if (!value) {
        this.filterType = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((Integer)value);
        }
        break;

      case FILTER_TYPE:
        if (value == null) {
          unsetFilterType();
        } else {
          setFilterType((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      case FILTER_TYPE:
        return getFilterType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      case FILTER_TYPE:
        return isSetFilterType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getMeetings_args)
        return this.equals((getMeetings_args)that);
      return false;
    }

    public boolean equals(getMeetings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true;
      boolean that_present_employeeId = true;
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (this.employeeId != that.employeeId)
          return false;
      }

      boolean this_present_filterType = true && this.isSetFilterType();
      boolean that_present_filterType = true && that.isSetFilterType();
      if (this_present_filterType || that_present_filterType) {
        if (!(this_present_filterType && that_present_filterType))
          return false;
        if (!this.filterType.equals(that.filterType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + employeeId;

      hashCode = hashCode * 8191 + ((isSetFilterType()) ? 131071 : 524287);
      if (isSetFilterType())
        hashCode = hashCode * 8191 + filterType.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMeetings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetEmployeeId(), other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetFilterType(), other.isSetFilterType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilterType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterType, other.filterType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMeetings_args(");
      boolean first = true;

      sb.append("employeeId:");
      sb.append(this.employeeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("filterType:");
      if (this.filterType == null) {
        sb.append("null");
      } else {
        sb.append(this.filterType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMeetings_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMeetings_argsStandardScheme getScheme() {
        return new getMeetings_argsStandardScheme();
      }
    }

    private static class getMeetings_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMeetings_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getMeetings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.employeeId = iprot.readI32();
                struct.setEmployeeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILTER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filterType = iprot.readString();
                struct.setFilterTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getMeetings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeI32(struct.employeeId);
        oprot.writeFieldEnd();
        if (struct.filterType != null) {
          oprot.writeFieldBegin(FILTER_TYPE_FIELD_DESC);
          oprot.writeString(struct.filterType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMeetings_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMeetings_argsTupleScheme getScheme() {
        return new getMeetings_argsTupleScheme();
      }
    }

    private static class getMeetings_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMeetings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMeetings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        if (struct.isSetFilterType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEmployeeId()) {
          oprot.writeI32(struct.employeeId);
        }
        if (struct.isSetFilterType()) {
          oprot.writeString(struct.filterType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMeetings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readI32();
          struct.setEmployeeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.filterType = iprot.readString();
          struct.setFilterTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getMeetings_result implements org.apache.thrift.TBase<getMeetings_result, getMeetings_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMeetings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMeetings_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMeetings_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMeetings_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Meeting> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Meeting.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMeetings_result.class, metaDataMap);
    }

    public getMeetings_result() {
    }

    public getMeetings_result(
      java.util.List<Meeting> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMeetings_result(getMeetings_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Meeting> __this__success = new java.util.ArrayList<Meeting>(other.success.size());
        for (Meeting other_element : other.success) {
          __this__success.add(new Meeting(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public getMeetings_result deepCopy() {
      return new getMeetings_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Meeting> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Meeting elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Meeting>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Meeting> getSuccess() {
      return this.success;
    }

    public getMeetings_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Meeting> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Meeting>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getMeetings_result)
        return this.equals((getMeetings_result)that);
      return false;
    }

    public boolean equals(getMeetings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMeetings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMeetings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMeetings_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMeetings_resultStandardScheme getScheme() {
        return new getMeetings_resultStandardScheme();
      }
    }

    private static class getMeetings_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMeetings_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getMeetings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Meeting>(_list24.size);
                  @org.apache.thrift.annotation.Nullable Meeting _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new Meeting();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getMeetings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Meeting _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMeetings_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMeetings_resultTupleScheme getScheme() {
        return new getMeetings_resultTupleScheme();
      }
    }

    private static class getMeetings_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMeetings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMeetings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Meeting _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMeetings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<Meeting>(_list29.size);
            @org.apache.thrift.annotation.Nullable Meeting _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new Meeting();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getMeetingStatuses_args implements org.apache.thrift.TBase<getMeetingStatuses_args, getMeetingStatuses_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMeetingStatuses_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMeetingStatuses_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMeetingStatuses_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMeetingStatuses_argsTupleSchemeFactory();

    public int meetingId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEETINGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMeetingStatuses_args.class, metaDataMap);
    }

    public getMeetingStatuses_args() {
    }

    public getMeetingStatuses_args(
      int meetingId)
    {
      this();
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMeetingStatuses_args(getMeetingStatuses_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.meetingId = other.meetingId;
    }

    @Override
    public getMeetingStatuses_args deepCopy() {
      return new getMeetingStatuses_args(this);
    }

    @Override
    public void clear() {
      setMeetingIdIsSet(false);
      this.meetingId = 0;
    }

    public int getMeetingId() {
      return this.meetingId;
    }

    public getMeetingStatuses_args setMeetingId(int meetingId) {
      this.meetingId = meetingId;
      setMeetingIdIsSet(true);
      return this;
    }

    public void unsetMeetingId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEETINGID_ISSET_ID);
    }

    public void setMeetingIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEETINGID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return getMeetingId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getMeetingStatuses_args)
        return this.equals((getMeetingStatuses_args)that);
      return false;
    }

    public boolean equals(getMeetingStatuses_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_meetingId = true;
      boolean that_present_meetingId = true;
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (this.meetingId != that.meetingId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + meetingId;

      return hashCode;
    }

    @Override
    public int compareTo(getMeetingStatuses_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetMeetingId(), other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMeetingStatuses_args(");
      boolean first = true;

      sb.append("meetingId:");
      sb.append(this.meetingId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMeetingStatuses_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMeetingStatuses_argsStandardScheme getScheme() {
        return new getMeetingStatuses_argsStandardScheme();
      }
    }

    private static class getMeetingStatuses_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMeetingStatuses_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getMeetingStatuses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.meetingId = iprot.readI32();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getMeetingStatuses_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
        oprot.writeI32(struct.meetingId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMeetingStatuses_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMeetingStatuses_argsTupleScheme getScheme() {
        return new getMeetingStatuses_argsTupleScheme();
      }
    }

    private static class getMeetingStatuses_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMeetingStatuses_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMeetingStatuses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMeetingId()) {
          oprot.writeI32(struct.meetingId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMeetingStatuses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readI32();
          struct.setMeetingIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getMeetingStatuses_result implements org.apache.thrift.TBase<getMeetingStatuses_result, getMeetingStatuses_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMeetingStatuses_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMeetingStatuses_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMeetingStatuses_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMeetingStatuses_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<EmployeeMeetingStatus> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployeeMeetingStatus.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMeetingStatuses_result.class, metaDataMap);
    }

    public getMeetingStatuses_result() {
    }

    public getMeetingStatuses_result(
      java.util.List<EmployeeMeetingStatus> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMeetingStatuses_result(getMeetingStatuses_result other) {
      if (other.isSetSuccess()) {
        java.util.List<EmployeeMeetingStatus> __this__success = new java.util.ArrayList<EmployeeMeetingStatus>(other.success.size());
        for (EmployeeMeetingStatus other_element : other.success) {
          __this__success.add(new EmployeeMeetingStatus(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public getMeetingStatuses_result deepCopy() {
      return new getMeetingStatuses_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<EmployeeMeetingStatus> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(EmployeeMeetingStatus elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<EmployeeMeetingStatus>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<EmployeeMeetingStatus> getSuccess() {
      return this.success;
    }

    public getMeetingStatuses_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<EmployeeMeetingStatus> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<EmployeeMeetingStatus>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof getMeetingStatuses_result)
        return this.equals((getMeetingStatuses_result)that);
      return false;
    }

    public boolean equals(getMeetingStatuses_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMeetingStatuses_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMeetingStatuses_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMeetingStatuses_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMeetingStatuses_resultStandardScheme getScheme() {
        return new getMeetingStatuses_resultStandardScheme();
      }
    }

    private static class getMeetingStatuses_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMeetingStatuses_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getMeetingStatuses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<EmployeeMeetingStatus>(_list32.size);
                  @org.apache.thrift.annotation.Nullable EmployeeMeetingStatus _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new EmployeeMeetingStatus();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getMeetingStatuses_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (EmployeeMeetingStatus _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMeetingStatuses_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMeetingStatuses_resultTupleScheme getScheme() {
        return new getMeetingStatuses_resultTupleScheme();
      }
    }

    private static class getMeetingStatuses_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMeetingStatuses_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMeetingStatuses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (EmployeeMeetingStatus _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMeetingStatuses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<EmployeeMeetingStatus>(_list37.size);
            @org.apache.thrift.annotation.Nullable EmployeeMeetingStatus _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new EmployeeMeetingStatus();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
